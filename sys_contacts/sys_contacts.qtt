/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of QtUiTest.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/contacts

// helper function re :contact actions may be in a separate "Contacts menu"
function contactsMenuItem(menuText)
{
    var menuEntries = getValue(menuBar()).toString().split("\n");
    var index = 0;
    var separateMenu = false; // optimize number of calls to indexOf

    for (index = 0; index < menuEntries.length; index++){
        if (!separateMenu && menuEntries[index].indexOf("&Contacts") >= 0){
            separateMenu = true;
            menuText = "&Contacts/" + menuText;
        }
        if (menuEntries[index] == menuText)
            return menuText;
    }

    return undefined;

}

function addContact(name, phone, email, address, avatar) {
    select("Add");
    enter(name, "Name");
    enter(phone, "Phone");
    enter(email, "Email");
    enter(address, "Address");
    var selectPictureBtn = findByProperty( { className: "QPushButton", text : "Set picture" });
    select(selectPictureBtn[0]);
    enter(avatar, "File name:");
    // need to accept entry due to autocompletion
    keyClick(Qt.Key_Enter);
    select("Save");
    waitForSave();
}


// Returns true if contact named,name, can be found in contact list
function contactFind(name, partialMatch){
    var contactList = findWidget( { className: "QListWidget" } );
    var nameList = getValue(contactList).split("\n");
    var index = 0;
    var found = false;
    if (partialMatch == undefined){
        partialMatch = false;
    }
    for (index = 0; index < nameList.length; index++){
        if ((!partialMatch && nameList[index] == name)
            || (partialMatch && nameList[index].contains(name))){
            found = true;
            break;
        }
    }

    return found;
}


// not ideal, there is need to programaticly check that 
//  the contact details dialog is not longer showing, ie no "Save" button
function waitForSave(){
    for (var loop=0; loop < 5; loop++){
        if (getLabels().contains("&Save"))
            wait(1000); // wait to try again
        else
            break;
    }
    
    // should not happen
    verify(!getLabels().contains("&Save"));
}

testcase = {


    initTestCase: function()
    {
        startApplication("samplephonebook");

        var contactList = findWidget( { className: "QListWidget" } );
        verify(getValue(contactList).length == 0, "There must be zero contacts prior to running test, there are the following contacts:" + getValue(contactList));
    },

    cleanup: function()
    {
        // While there are names, delete the names from the list
    },

    addContact_data : {
        Name1 : ["Name1", "Phone1", "Email1", "Address1", "testdata/avatar1.png"],
        Name2 : ["Name2", "Phone2", "Email2", "Address2", "testdata/avatar2.png"],
        Name3 : ["Name3", "Phone3", "Email3", "Address3", "testdata/avatar3.png"]
    },

    /* Requirement: Add some contacts */
    addContact: function(name, phone, email, address, avatar)
    {
        addContact(name, phone, email, address, avatar);
        verify(contactFind(name), "Contact "+name+" was not created");
    },

    updateContactDetails_data : {
        Name1 : ["Name1", "Phone1", "Email1", "Address1", "testdata/avatar1.png"],
        Name2 : ["Name2", "Phone2", "Email2", "Address2", "testdata/avatar2.png"],
        Name3 : ["Name3", "Phone3", "Email3", "Address3", "testdata/avatar3.png"]
    },

    /* Requirement: Verify the contact details and confirm that it can be updated */
    /* verify added contact details and update contact name */
    updateContactDetails : function (name, phone, email, address, avatar)
    {
        var newname = name + ' 1';
        addContact(name, phone, email, address, avatar);
        verify(contactFind(name), "Contact "+name+" was not created");
        select(name);
        select("Edit");
        compare(getText("Name"), name);
        enter(newname, "Name");
        compare(getText("Phone"), phone);
        compare(getText("Email"), email);
        compare(getText("Address"), address);
        select("Save");
        waitForSave();
        verify(contactFind(name), "Contact "+newname+" was not updated");
    },

    filterCheck_data : {
        Name1 : ["Name1 1", true, false,  "Full contact name match"],
        Name2 : ["2", true, true, "Partial contact name match"],
        Name3 : ["NonExistant", false, false, "Non-existant contact name"]

    },

    /* Requirement : Verify the correct match of contacts against a simple filter */
    /* Test the "Apply &Filter" function */
    filterCheck : function(name, exists, partialMatch, message) {
        if (checkOS("maemo")){
          skip("Maemo menus not supported yet", SkipAll);
          /* mouseClick(400,10); // raise menu manually
              var maemoMenuBar = findByProperty({ className : "QMaemo5ApplicationMenu" });
              print("Maemo menu = " + maemoMenuBar);
              print("filterCheck:" + activeWidgetInfo());
              */
        }else{
          print("filterCheck:" + activeWidgetInfo());
          var menuItemName = "Apply &Filter...";
          var menuItem = contactsMenuItem(menuItemName);
          verify(menuItem != undefined, "No such \"" + menuItemName + "\" menu");
          select(menuItem, menuBar());
          enter(name, "Name");
          select("&Filter");
          verify(contactFind(name, partialMatch) == exists, "Apply filter failed: " +name + ":" + exists + " " + message);
        }
    },


    clearFilterCheck_data : {
        Name1 : ["Name1 1"]
    },

    /* Test the "Clear Filter" function, this is pre-requisite for deleteContact(name) */
    clearFilterCheck : function(name){
        if (checkOS("maemo")){
            skip("Maemo menus not supported yet", SkipAll);
        }else{
            select(contactsMenuItem("&Clear Filter"), menuBar());
            verify(contactFind(name), "Clear filter failed: Looking for " + name);
        }
    },


    deleteContact_data : {
        Name1 : ["Name3 1"],
        Name2 : ["Name1 1"],
        Name3 : ["Name2 1"]
    },

    /* Requirement: Verify that a contact can be deleted */
    deleteContact : function(name){
        addContact(name);
        verify(contactFind(name), "Contact "+name+" was not created");
        var contactList = findWidget( { className: "QListWidget" } );
        mouseClick(contactList[0]);
        select(name);
        select("Delete");
        for (var loop=0; loop < 5;loop++){
            if (contactFind(name))
                wait(1000); // wait to try again
            else
                break;
        }
        verify(!contactFind(name), "Delete contact failed on " + name);
  }


}
