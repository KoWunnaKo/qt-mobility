/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example slideshow
    \title SlideShow Example


    \image slideshow-img1.png


    Slideshow displays a series of time delayed images after you select a
    source image directory to use. The folder button presents a list of three
    options: browse for a directory, load a playlist or enter a location.

    This implementation uses a QMediaImageViewer object for the image with
    a QVideoWidget used to do the display. Whether the the source is a
    browsed directory, a playlist file or a URL to a local or remote
    location the playlist object in Slideshow is updated with the file or
    multiple file locations. 

    \code
        connect(imageViewer, SIGNAL(stateChanged(QMediaImageViewer::State)),
                this, SLOT(stateChanged(QMediaImageViewer::State)));

        playlist = new QMediaPlaylist;
        playlist->setMediaObject(imageViewer);
    \endcode

    We create a QVideoWidget to display the viewer and add it to the dialog.

    \code
        QVideoWidget *videoWidget = new QVideoWidget;
        videoWidget->setMediaObject(imageViewer);
    \endcode


    \code
        layout->addWidget(videoWidget, Qt::AlignCenter);
    \endcode


    The timeout between images is set by changing the timeout property in
    QMediaImageViewer which is in milliseconds. So to change the timeout
    to five seconds
    \code
        imageViewer->setTimeout( 5000 );
    \endcode


*/
