commit 31f6755dc0fa7993cc27ba5a66868a88e422356a
Author: Holger Schr√∂der <holger.schroeder.ext@basyskom.de>
Date:   Thu Oct 27 13:49:59 2011 +0200

    Remove more wrong bold tags for titles (doc fix)
    
    Task-number: NB#281692

diff --git a/doc/src/contacts.qdoc b/doc/src/contacts.qdoc
index 2ec04ad..fe3bde8 100644
--- a/doc/src/contacts.qdoc
+++ b/doc/src/contacts.qdoc
@@ -99,7 +99,7 @@ are not derived from QObject, and hence can be used in lists, do not have
 parents, do not emit signals, and so on.  They represent data which may be
 manipulated and retrieved from a \l{Manager}{manager}.
 
-\section3 \bold{Contact}
+\section3 Contact
 
 A \l{QContact}{contact} is the digital representation of a person, group or
 entity, which is stored in a platform-specific manner. Information pertaining
@@ -122,7 +122,7 @@ in that manager.  Note that a contact stored in one manager may have the same
 local id as a different contact stored in another manager; please see the
 QContactId documentation for more information.
 
-\section3 \bold{Detail}
+\section3 Detail
 
 A \l{QContactDetail}{detail} is a single, cohesive unit of information that is
 stored in a contact.  As explained previously, it is valid for a particular
@@ -134,7 +134,7 @@ apply to the the detail (such as read-only, irremovable, etc).
 There are a number of common details defined in the API which are intended
 for use by clients, as listed \l{"Contact Details" Leaf Classes}{here}.
 
-\section3 \bold{Detail Definition}
+\section3 Detail Definition
 
 Each detail stored in a contact has defined semantics of usage and storage.
 The Qt Contacts API allows per-datastore contact
@@ -154,7 +154,7 @@ supported detail definition for that leaf class and modify its behavior
 accordingly (for example, if the \c CustomLabel field of the QContactName
 leaf detail is not supported in a particular manager).
 
-\section3 \bold{Relationships}
+\section3 Relationships
 
 Contacts may participate in \l{QContactRelationship}{relationships} with other
 contacts.  The details of any such relationship is stored by the manager which
@@ -176,7 +176,7 @@ etc) which are reported by the manager on request.  The manager therefore
 provides access to detail definitions, contacts, and relationships stored in
 different datastores, in a platform and datastore independent manner.
 
-\section3 \bold{Meta Data API}
+\section3 Meta Data API
 
 The API offered by the QContactManager exposes functionality which is
 implemented by plugins.  These plugins may be platform specific, and may be
@@ -224,7 +224,7 @@ The functionality that the above functions provide is only available through
 synchronous API.
 
 
-\section3 \bold{Asynchronous API}
+\section3 Asynchronous API
 
 The asynchronous API provides a way to access or modify the
 contact information managed by a particular backend via non-blocking,
@@ -245,7 +245,7 @@ capability or meta data information reporting.
 
 For more detailed documentation on the asynchronous API, see the \l{Contacts Asynchronous API}.
 
-\section3 \bold{Synchronous API}
+\section3 Synchronous API
 
 The synchronous API provides the simplest way to access or modify the
 contact information managed by a particular backend.  It has the
diff --git a/doc/src/contactsasync.qdoc b/doc/src/contactsasync.qdoc
index dc2e8e6..d68b681 100644
--- a/doc/src/contactsasync.qdoc
+++ b/doc/src/contactsasync.qdoc
@@ -91,7 +91,7 @@ of the following functions:
   \o removeContacts(QList<QContactLocalId>* contactIds, QMap<int, QContactManager::Error>* errorMap)
 \endlist
 
-\section3 \bold{Relationship Manipulation}
+\section3 Relationship Manipulation
 
 Contacts may be related in various ways.  The contacts API allows clients to define relationships between contacts.
 For in-depth information about relationship manipulation, please refer to the \l{Contacts Synchronous API}.
diff --git a/doc/src/contactsengines.qdoc b/doc/src/contactsengines.qdoc
index 6a83562..d6c549c 100644
--- a/doc/src/contactsengines.qdoc
+++ b/doc/src/contactsengines.qdoc
@@ -77,7 +77,7 @@ supported by an engine by calling QContactManager::supportedContactTypes().
 The Contacts module of the QtMobility project includes several backends already, some of which
 are designed to interface with the default addressbook on their particular platform.
 
-\section3 \bold{In-Memory Example Engine}
+\section3 In-Memory Example Engine
 
 The in-memory engine identifies itself as the "memory" engine.  It is available on all platforms
 which are supported by the QtMobility project.
@@ -86,7 +86,7 @@ The in-memory engine supports the default schema, and provides all functionality
 the QtMobility Contacts API; however, all data is stored in-memory and is not persisted in any
 way.
 
-\section3 \bold{Symbian Engine}
+\section3 Symbian Engine
 
 The Symbian engine identifies itself as the "symbian" engine, and is only available on the
 Symbian S60 3.1, S60 3.2, S60 5.0 and Symbian^3 platforms.
@@ -98,14 +98,14 @@ The symbian engine allows clients to use both the asynchronous and synchronous i
 and supports various different relationships, supports setting the self-contact, and
 persists all saved data to the system addressbook.
 
-\section3 \bold{Symbian Sim Engine}
+\section3 Symbian Sim Engine
 
 The Symbian Sim engine identifies itself as the "symbiansim" engine, and is only available
 on Symbian platforms.  It is an extremely limited engine which supports a very small
 subset of the default schema, and can be constructed with a "store" parameter to set which contact
 store to interact with.  The value of the "store" parameter may be either "ADN", "FDN" or "SDN".
 
-\section3 \bold{Maemo 5 (Fremantle) Engine}
+\section3 Maemo 5 (Fremantle) Engine
 
 The Maemo 5 (Fremantle) engine identifies itself as the "maemo5" engine, but is only available
 on the Maemo 5 (Fremantle) platform which has the correct libraries installed (including
@@ -140,7 +140,7 @@ The Maemo 5 (Fremantle) engine supports asynchronous and synchronous requests, b
 group contacts or relationships of any kind.  It does not allow clients to set a particular contact
 as the "self" contact.  It persists all data in the system addressbook.
 
-\section3 \bold{Windows CE Engine}
+\section3 Windows CE Engine
 
 The Windows CE engine identifies itself as the "wince" engine, and is only available
 on the Windows Mobile 6.0 platform.
@@ -164,7 +164,7 @@ The default implementation for most functions will set the error to
 \c QContactManager::NotSupportedError and return the value which indicates that an error has
 occurred.
 
-\section3 \bold{Mandatory Functions}
+\section3 Mandatory Functions
 
 All engines must implement the following functions:
 
@@ -215,7 +215,7 @@ It is recommended that all engine implementations support asynchronous requests,
 use a "dummy" implementation which services the request synchronously during startRequest, and then
 emit the appropriate signals from the request via a zero-millisecond timeout timer.
 
-\section3 \bold{Optional Functionality}
+\section3 Optional Functionality
 
 The rest of the virtual functions are optional, and should be implemented only if the engine
 supports the operations.
@@ -282,7 +282,7 @@ via QContactManagerEngine::hasFeature(), and must also implement:
 \endlist
 
 
-\section3 \bold{Optional Implementation}
+\section3 Optional Implementation
 
 Apart from areas of functionality which may be optionally implemented by the engine or not,
 the default implementation provides several functions which operate in a naive, in-memory
diff --git a/doc/src/contactssync.qdoc b/doc/src/contactssync.qdoc
index b501e7d..d73eb50 100644
--- a/doc/src/contactssync.qdoc
+++ b/doc/src/contactssync.qdoc
@@ -251,7 +251,7 @@ saves it back.
 
     \snippet snippets/qtcontactsdocsample/qtcontactsdocsample.cpp Installing a plugin which modifies a definition
 
-\section3 \bold{Modifying an existing contact and saving the modifications}
+\section3 Modifying an existing contact and saving the modifications
 
 The client retrieves a contact, modifies one of its details, adds a new
 detail, and then saves the contact back to the manager.  Note that it uses
diff --git a/doc/src/location.qdoc b/doc/src/location.qdoc
index 27c69df..f50f2b3 100644
--- a/doc/src/location.qdoc
+++ b/doc/src/location.qdoc
@@ -253,16 +253,16 @@ For details on the QML support provided for the Location API see the documentati
 
 \section2 Examples
 
-\section3 \bold{Flickr Demo}
+\section3 Flickr Demo
 
 The \l{flickrdemo}{Flickr Demo} uses the Location to download thumbnail
 images from Flickr relevant to the current location.
 
-\section3 \bold{Weather Info Demo}
+\section3 Weather Info Demo
 The \l{weatherinfo}{Weather Info demo} uses Location display data about the
 weather for the current location.
 
-\section3 \bold{Light Maps Demo}
+\section3 Light Maps Demo
 The \l{lightmaps}{Light Maps demo} uses Location display a street map for
 the current location.
 
@@ -271,7 +271,7 @@ the current location.
 Examples using the Location QML Plugin demonstrate how to use the QML/C++
 bindings to easily access the Location API features.
 
-\section3 \bold{Flickr QML Example}
+\section3 Flickr QML Example
 The Flickr example now in the form of a QML application. This also displays
 in the form of a mobile application.
 
@@ -422,11 +422,11 @@ that landmark is not exported.
 
 \section2 Landmark classes
 
-\section3 \bold{Main Landmark Classes}
+\section3 Main Landmark Classes
 
 \annotatedlist landmarks-main
 
-\section3 \bold{Landmark Selection classes}
+\section3 Landmark Selection classes
 
 Landmark selection is facilitated by filter and sort order classes.  The filter classes
 define what criteria that landmarks must match and the sort order classes specify how
@@ -437,22 +437,22 @@ filter in an intersection filter will sort results in order of ascending distanc
 the QLandmarkManager class (for synchronous landmark selection) or the request classes
 for (asynchronous landmark selection)
 
-\section3 \bold{Filters}
+\section3 Filters
 
 \annotatedlist landmarks-filter
 
-\section3 \bold{SortOrders}
+\section3 SortOrders
 
 \annotatedlist landmarks-sort
 
 \target Asynchronous Landmark Requests
-\section3 \bold{Asynchronous Requests}
+\section3 Asynchronous Requests
 
 Asynchronous operations are facilitates by the request classes listed below:
 
 \annotatedlist landmarks-request
 
-\section3 \bold{Implementing backends}
+\section3 Implementing backends
 
 A manager backend may be implemented by subclassing QLandmarkManagerEngine, and providing
 a QLandmarkManagerEngineFactory which can instantiate it when required.
@@ -512,7 +512,7 @@ QGeoMappingManager outside of the QGraphicsGeoMap constructor:
 
 \annotatedlist maps-mapping
 
-\section3 \bold{Map objects}
+\section3 Map objects
 
 QGeoMapObject and its subclasses provide the ability to add graphics to the map
 specified in terms of coordinates and distances. QGeoMapObject instances can
diff --git a/doc/src/publ-subs.qdoc b/doc/src/publ-subs.qdoc
index 54c849f..f74fc71 100644
--- a/doc/src/publ-subs.qdoc
+++ b/doc/src/publ-subs.qdoc
@@ -194,7 +194,7 @@ to somehow specify how particular paths are turned into RProperty, CRepository a
 key definitions. There are two ways to accomplish this. The keys can be accessed using numeric
 uids, or the paths can be mapped to textual paths using QCRML files.
 
-\section3 \bold{Accessing Properties, Central Repository and Feature Manager Using UIDs}
+\section3 Accessing Properties, Central Repository and Feature Manager Using UIDs
 
 Accessing Symbian OS Properties, Central Repository keys and Feature Manager flags using numeric
 UIDs is done with reserved paths where the first part of the path is either \c /ps/, \c /cr/ or
@@ -218,7 +218,7 @@ For example following two paths point to the same Property:
 When using numeric paths, it is possible to get change notifications only using full path to a specific
 key. I.e. key \c /ps/<uid> is not considered changed when any of the keys under that UID change.
 
-\section3 \bold{Declaring Value Space Paths Using QCRML}
+\section3 Declaring Value Space Paths Using QCRML
 
 QCRML files are XML files that can be used to declare available Value Space paths that are visible
 to the clients.  Each path defines whether the actual value is stored in CRepository, RPropery or
@@ -256,7 +256,7 @@ flags:
 
 The \c qcrmlgen tool located in the \c tools directory can be used to create QCRML files.
 
-\section3 \bold{Location of QCRML Files}
+\section3 Location of QCRML Files
 
 All the QCRML files need to be located in \c {\resource\qt\crml} directory (in any available drive)
 in Symbian file system.
@@ -273,7 +273,7 @@ symbian {
 }
 \endcode
 
-\section3 \bold{Usage and limitations of Symbian Settings Layer}
+\section3 Usage and limitations of Symbian Settings Layer
 
 The capabilities needed for reading and writing Symbian OS Properties and Central Repository files
 are defined when the keys are created. Thus, the capability requirements to access existing keys
@@ -305,7 +305,7 @@ supported or it does not exist, the value is false.
 For more information about Symbian OS Properties, Central Repository and Feature Manager refer to
 Symbian Developer's Library at \l {http://forum.nokia.com/}{Forum Nokia}.
 
-\section3 \bold{Interoperability with native Symbian code}
+\section3 Interoperability with native Symbian code
 
 If interoperability between native Symbian code is needed for non-integer types, the values have
 to be converted to bytearray before writing them to RProperty or CRepository. When data stored by
@@ -324,7 +324,7 @@ For example:
 /ps/0x100012ab/0xd?string
 \endcode
 
-\section3 \bold{Discovering Symbian key ids}
+\section3 Discovering Symbian key ids
 
 Symbian Value Space keys are closely tied with the related Symbian C++ APIs. 
 The information about available keys is usually found from the native
@@ -347,7 +347,7 @@ the keys, in addition to above:
 
 Publish and Subscribe API can be used to access the GConf configuration system.
 
-\section3 \bold{Limitations of GConf Layer}
+\section3 Limitations of GConf Layer
 
 GConf can natively store only a limited set of QVariant data types. These types are Bool, Int, Double,
 String, StringList and List. When publishing other data types the values are automatically serialized
@@ -366,7 +366,7 @@ You can force the selection of one or the other path scheme by passing the flags
 QValueSpace::PermanentLayer and QValueSpace::TransientLayer to the constructors of QValueSpaceSubscriber
 and QValueSpacePublisher along with the path name.
 
-\section3 \bold{Organization and application name}
+\section3 Organization and application name
 
 ContextKit requires providers to register with a valid DBus service name in order to publish values.
 The ContextKit Layer automatically builds this name from QCoreApplication::organizationDomain() and
@@ -380,7 +380,7 @@ QCoreApplication::setApplicationName("Test Application");
 // will register with 'com.example.Test-Application'
 \endcode
 
-\section3 \bold{Declaring Value Space Paths Using Property Declaration Files}
+\section3 Declaring Value Space Paths Using Property Declaration Files
 
 ContextKit also requires that an entry be present in the ContextKit Registry on the system before
 subscribers will be able to find an advertised property. The Registry is a set of XML files, normally
@@ -414,7 +414,7 @@ during packaging.
 For more detailed information on this, please refer to
 \l{http://maemo.gitorious.org/maemo-af/contextkit/blobs/master/doc/context-providers.txt}{How to provide context properties}.
 
-\section3 \bold{Limitations of ContextKit Layer}
+\section3 Limitations of ContextKit Layer
 
 Similar to both the Symbian and Gconf backends, ContextKit supports only a limited range of QVariant data
 types. Types not supported are serialized in a manner transparent to the API user, but interoperatibility
diff --git a/doc/src/qlandmarks.qdoc b/doc/src/qlandmarks.qdoc
index 61be5ae..9cea6d9 100644
--- a/doc/src/qlandmarks.qdoc
+++ b/doc/src/qlandmarks.qdoc
@@ -49,7 +49,7 @@ namespace impacts on application development.
 
 \section1 Creating/saving categories and landmarks
 \section2 Synchronous
-\section3 \bold{Creating/saving a category}
+\section3 Creating/saving a category
 The following example demonstrates how to synchronously add a category.
 We create a QLandmarkCategory instance, set the desired properties and then use a
 QLandmarkManager instance to save it.  When the category is saved, it is assigned
@@ -57,7 +57,7 @@ a QLandmarkCategoryId which is why it passed as a pointer.
 
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Add category synchronously
 
-\section3 \bold{Creating/saving a landmark}
+\section3 Creating/saving a landmark
 The following example demonstrates synchronously adding a landmark.  We create
 a QLandmark instance, set the desired properties and then use a QLandmarkManger instance
 to save it.  When the landmark is saved, it is assigned a QLandmarkId, which is why it is
@@ -65,7 +65,7 @@ passed as a pointer.
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Add landmark synchronously
 
 \section2 Asynchronous
-\section3 \bold{Creating/saving a category}
+\section3 Creating/saving a category
 We create a QLandmarkCategory instance and set the desired properties.  Next we
 have an instance of a QLandmarkCategorySaveRequest and set the category we want to save.
 We then connect the \l {QLandmarkAbstractRequest::stateChanged()}
@@ -81,7 +81,7 @@ We may reuse the QLandmarkCategorySaveRequest by setting another category and ru
 
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Add category asynchronously handler
 
-\section3 \bold{Creating/saving a landmark}
+\section3 Creating/saving a landmark
 We create a QLandmark instance and set the desired properties.  Next we
 have an instance of a QLandmarkSaveRequest and set the landmark we want to save.
 We then connect the \l {QLandmarkAbstractRequest::stateChanged()}
@@ -99,7 +99,7 @@ We may reuse the QLandmarkSaveRequest by setting another landmark and running \l
 
 \section1 Retrieving categories and landmarks
 \section2 Synchronous
-\section3 \bold{Retrieving categories}
+\section3 Retrieving categories
 To retrieve categories we simply make the appropriate call to the QLandmarkManager:
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Retrieve categories synchronously
 
@@ -107,7 +107,7 @@ When retrieving categories we may do so by the category ids.  When the category
 we may use the id to retrieve a category object:
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Retrieve categories synchronously by id
 
-\section3 \bold{Retrieving landmarks}
+\section3 Retrieving landmarks
 To retrieve landmarks we create an appropriate filter, in this case a category filter.
 In this example, we also provide a \c limit of 5 and \c offset of 0 to only retrieve the first
 five landmarks and we provide a sort order to the QLandmarkManager.
@@ -119,7 +119,7 @@ time we can use the id to retrieve the landmark object:
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Retrieve landmarks synchronously by id
 
 \section2 Asynchronous
-\section3 \bold{Retrieving categories}
+\section3 Retrieving categories
 To retrieve categories we can use a QLandmarkCategoryFetchRequest (or if we wish to fetch id's then a
 QLandmarkCategoryIdFetchRequest).  The request's \l {QLandmarkAbstractRequest::stateChanged()} {stateChanged()}
 signal is connected to a slot which detects whether the operation is complete.  To begin the request
@@ -132,7 +132,7 @@ the QLandmarkAbstractRequest::FinishedState and if there are no errors, print ou
 
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Retrieve categories asynchronously handler
 
-\section3 \bold{Retrieving landmarks}
+\section3 Retrieving landmarks
 To retrieve landmarks we create an appropriate filter, in this case a category filter,
 and set it in a QLandmarkFetchRequest.
 In this example, we also provide a \c limit of 5 and \c offset of 0 to only retrieve the first
@@ -152,13 +152,13 @@ the QLandmarkAbstractRequest::FinishedState and if there are no errors, print ou
 
 \section2 Synchronous
 
-\section3 \bold{Deleting a category}
+\section3 Deleting a category
 
 To remove a category we simply pass the category id to a QLandmarkManager.
 
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Remove category synchronously
 
-\section3 \bold{Deleting a landmark}
+\section3 Deleting a landmark
 
 To remove a landmark we simply pass the landmark id to a QLandmarkManager.
 
@@ -166,7 +166,7 @@ To remove a landmark we simply pass the landmark id to a QLandmarkManager.
 
 \section2 Asynchronous
 
-\section3 \bold{Deleting a category}
+\section3 Deleting a category
 To remove a category we use a QLandmarkCategoryRemoveRequest and set
 the id of the category we want to remove. We then connect the \l {QLandmarkAbstractRequest::stateChanged()}
 {stateChanged()} signal up to a slot which watches the state of the request.  To begin the request
@@ -181,7 +181,7 @@ We may reuse the QLandmarkCategoryRemoveRequest by setting another category id a
 
 \snippet snippets/qtlandmarksdocsample/qtlandmarksdocsample.cpp Remove category asynchronously handler
 
-\section3 \bold{Deleting a landmark}
+\section3 Deleting a landmark
 To remove a landmark we use a QLandmarkRemoveRequest and set the id of the landmark we want to remove.
 We then connect the \l {QLandmarkAbstractRequest::stateChanged()}
 {stateChanged()} signal up to a slot which watches the state of the request.  To begin the request
@@ -271,13 +271,13 @@ longer and more complicated than an example.
 
 \section1 QML Examples
 
-\section2 \bold{Landmark Map QML Example}
+\section2 Landmark Map QML Example
 
 The \l {Landmark Map Example} shows how a mobile application might display
 some map information which includes landmark information imported from a landmark
 file.
 
-\section2 \bold{Map Viewer QML Example}
+\section2 Map Viewer QML Example
 
 The \l {Declarative Map Viewer Example}{Map Viewer example} displays a map of
 the current location or failing that a hard-coded default location to display
diff --git a/doc/src/sf.qdoc b/doc/src/sf.qdoc
index 98f66a7..b210034 100644
--- a/doc/src/sf.qdoc
+++ b/doc/src/sf.qdoc
@@ -158,7 +158,7 @@ or whether it is valid for the current user only. The system default is used if
 scope has not been defined. This enables users to customize their personal preferences.
 By default the first service installing a so far unknown interface becomes the system wide default selection.
 
-\section3 \bold{QObject based services}
+\section3 QObject based services
 
 This is the most common way of interacting with services.
 
@@ -172,7 +172,7 @@ The above invocation of the file storage object's deleteFile() function is done
 QMetaObject. The client does not require any knowledge of the objects actual type and therefore
 does not have to link against a service specific library.
 
-\section3 \bold{Typed services}
+\section3 Typed services
 
 So far all lookup mechanism returned a QObject pointer. This pointer can be
 utilized by introspecting the object, using Qt's meta object system.
