/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/systeminfo

testcase = {

    Configurable_Signal_Strength: function()
    {
          // Test meta data
          testApplication = "System Info - Configurable Signal Strength";
          testBinary = "";
          testGoal = "Verify that ";
          testPreconditions = "None";
          testGroups = "BAT";

          // Test steps
          skip('Configurable Signal Strength not implemented yet', SkipAll);
    },

    Storage_changed_notification: function()
    {
          // Test meta data
          testApplication = "System Info - Storage Changed Notification";
          testBinary = "examples/qsysinfo";
          testGoal = "Verify that the system detects changes to storage media correctly and sends notifications";
          testPreconditions = "   1. target supports removable storage, if not then pass this test<br>
   1. Ensure that target system does not have any removable storage inserted/mounted<br>
                               *Note:* On S60 platforms removing a media might cause qsysinfo to be closed, which is usual";
          testGroups = "BAT";

          // Test steps
          prompt(twiki("---+++ " + testApplication + "<br><br>
              *Goal:* " + testGoal + "<br>
              *Tested Binary:* " + testBinary + "<br>
              *Pre-Requisites:* " + testPreconditions + "<br>

              | *Step* | *Verification* |
              | Start " + testBinary + " | App starts correctly |
              | Switch to the *Storage* tab | Verify that the removable storage status is unavailable |
              | Insert/mount the storage | Verify that the storage appears with correct size |
              | Remove/unmount the removable media | Verify that the storage disappears or marked unavailable |
        "));
    },

    Query_OS_Qt_firmware_versions: function()
    {
       // Test meta data
       testApplication = "System Info - OS Qt Firmware Version";
       testBinary = "BlueWheel/SystemInfo";
       testGoal = "Verify that OS, Qt and Firmware versions numbers can be read";
       testPreconditions = "None";
       testGroups = "BAT";

       // Test steps
       prompt(twiki("---+++ " + testApplication + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

           | *Step* | *Verification* |
           | Launch " + testBinary + " | App starts correctly |
           | Open *General/Features* | Features page is shown |
           | From the *Version* pulldown menu select *Os* | Verify the Os version is what is expected for the platform |
           | From the *Version* pulldown menu select *QtCore* | Verify the Qt version is what is expected |
           | From the *Version* pulldown menu select *Firmware* | Verify the Firmware version is what is expected for the platform |
           | From the *Version* pulldown menu select *QtMobility* | Verify the QtMobility version is what is expected |
        "));
    },

    Query_device_hardware_features: function()
    {
        // Test meta data
        testApplication = "System Info - Device Hardware Features";
        testBinary = "BlueWheel/SystemInfo";
        testGoal = "Verify that device hardware status can be read";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App starts correctly |
            | Open *General/Features* | Features page is shown |
            | From the *Feature* pulldown menu select *Bluetooth* | Verify the Bluetooth status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Camera* | Verify the camera status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Fmradio* | Verify the Fmradio status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Ir* | Verify the Ir status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Led* | Verify the Led status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Memcard* | Verify the Memcard status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Usb* | Verify the Usb status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Vib* | Verify the Vib status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Wlan* | Verify the Wlan status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Sim* | Verify the Sim status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Location* | Verify the Location status is what is expected for the platform |
            | From the *Feature* pulldown menu select *VideoOut* | Verify the VideoOut status is what is expected for the platform |
            | From the *Feature* pulldown menu select *Haptics* | Verify the Haptics status is what is expected for the platform |
            | From the *Feature* pulldown menu select *FmTransmitter* | Verify the FmTransmitter status is what is expected for the platform |
        "));
    }
}
