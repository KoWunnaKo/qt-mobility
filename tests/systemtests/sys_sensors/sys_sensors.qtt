/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of QtUiTest.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/sensors

testcase =  {

    Generic_Rotation : function()
    {
        prompt(twiki('*Verify Generic Rotation values*

    | *Step* | *Verification* |
    | Launch *Sensor Explorer* application | |
    | Select Generic Rotation from the sensors list | |
    | In *Sensor Properties* click *Start* | |
    | Position device flat on its back with screen showing upwards | Verify that values for x, y and z gravitate around zero* |
    | Rotate device on x axis toward user | Verify that x axis value increases from 0 all the way to 90 when held straight up |
    | Keep rotating device past vertical position | Verify that x axis value decrees from 90 down towards to 0 when held upside down (screen towards ground)  |
    | Return device flat on its back with screen showing upwards | Verify that value for x has returned to zero** |
    | Rotate device on y axis to right side | Verify that y axis value increases from 0 all the way to 90 when held straight up |
    | Keep rotating device past vertical position | Verify that y axis value keeps increasing from 90 towards 180 |
    | Rotate device on y axis until upside down - screen towards ground | Verify that y axis value gravitates around and switches between 180/-180 |
    | Keep rotating device on y axis past inverted horizontal  | Verify that y axis value rises from -180 towards 0 |
    | In this test, z values will always be 0 | |

Notes:
    * * Small variations in value due to sensor sensitivity and large precision employed
    * ** On some Maemo5 devices, due to camera housing, device is not flat when resting on hard surface, so small variation will be present
        '));
    },

    Sym_Rotation : function()
    {
        prompt(twiki('*Verify Sym Rotation values*

    | *Step* | *Verification* |
    | Launch *Sensor Explorer* application | |
    | Select Sym Rotation from the sensors list | |
    | In *Sensor Properties* click *Start* | |
    | Position device flat on its back with screen showing upwards | Verify that values for x, y and z gravitate around zero* |
    | Rotate device on x axis toward user | Verify that x axis value increases from 0 all the way to 90 when held straight up |
    | Keep rotating device past vertical position | Verify that x axis value decrees from 90 down towards to 0 when held upside down (screen towards ground)  |
    | Return device flat on its back with screen showing upwards | Verify that value for x has returned to zero** |
    | Rotate device on y axis to right side | Verify that y axis value increases from 0 all the way to 90 when held straight up |
    | Keep rotating device past vertical position | Verify that y axis value keeps increasing from 90 towards 180 |
    | Rotate device on y axis until upside down - screen towards ground | Verify that y axis value gravitates around and switches between 180/-180 |
    | Keep rotating device on y axis past inverted horizontal  | Verify that y axis value rises from -180 towards 0 |
    | In this test, z values will always be 0 | |

Notes:
    * * Small variations in value due to sensor sensitivity and large precision employed
    * ** On some Maemo5 devices, due to camera housing, device is not flat when resting on hard surface, so small variation will be present
        '));
    },


    Sym_Proximity_values: function()
    {
        prompt(twiki('*Verify Sym Proximity values*

    *Note: On Maemo5 devices, Proximity is a bool value

    | *Step* | *Verification* |
    | Launch *Sensor Explorer* application | |
    | Select Proximity from the sensors list | |
    | In *Sensor Properties* click *Start* | Verify that the reading for Close is False |
    |With an open palm of the hand, approach the device where the proximity sensor is located | Verify that the value of Index 0 changes to True once close enough to the device |
    | Move hand away from device | Verify that the value of Close changes to False once again one far enough from device |
        '));
    },


    Sym_Accelerometer: function()
    {
        prompt(twiki('*Verify Sym Accelerometer*

    | *Step* | *Verification* |
    | Launch *Sensor Explorer* application | |
    | Select Accelerometer from the sensors list | |
    | Position device flat on a suffice | |
    | In *Sensor Properties* click *Start* | Verify that the reading for x and y values are gravitating around zero and that z is around 9.8  |
    | Lift device on to its x axis | Verify that the value of x changes 0 to 9.8, and that z changes from 9.8 to 0 while y remains 0 |
    | Lift device on to its y axis | Verify that the value of y changes to 9.8, x changes to 0, while z remains 0 |
        '));
     },


    Sym_Ambient_Light: function()
    {
        prompt(twiki('*Verify Sym Ambient Light Sensor*


    | *Step* | *Verification* |
    | Launch *Sensor Explorer* application | |
    | Select Ambient Light from the sensors list | |
    | In *Sensor Properties* click *Start* | Verify that the reading for Light Level is Light |
    | With the thumb of the left hand, cover the light sensor on the device* | Verify that the value of Index 0 changes from Light through Twilight to Dark |
    | Move hand away from device | Verify that the value of Light Level changes from Dark through Twilight to Light |
    | Take torch and point at face of device  | Verify that the value of Light Level changes from Light to Bright |
    | Move torch in on the light sensor  | Verify that the value of Light Level changes from Bright to Sunny |
    | Move torch away from device | Verify that the value of Light Level changes from Sunny back to Light |

    Note:
    * Hand held torch or other light source required for this test
    * * Located at the top-left of the device
        '));
    },

    Freefall_Detection : function()
    {
        prompt(twiki('*Verify Free Fall Detection*

    | *Step* | *Verification* |
    | Launch *Small Sensors* application | |
    | From menu, select Free Fall | |
    | Click on Setup free fall trigger |  |
    | Drop device from arbitrary hight * (within reason, preserving device integrity)  | Verify that the value of Free fall time and Hight reflect the the actual test parameters |

Note:
    * * With every intention of catching device before it hits the ground
            '));
    },


    Small_Sensor_Orientation: function()
    {
        prompt(twiki('*Verify Sensor Orientation*

    | *Step* | *Verification* |
    | Launch *Small Sensors* application | |
    | From menu, select *Orientation* | |
    | Position device flat down on surface | Verify that device recognizes that it is *Face Up*, all sliders should be in middle position |
    | Lift device on x axis to vertical | Verify that device recognizes that it is *Top Up*, x slider should be in right position and x = 90  |
    | Return device to the starting position | Verify that device recognizes that it is *Face Up*, all sliders should return to the middle position and all values gravitate towards 0 |
    | Lift device on y axis to vertical | Verify that device recognizes that it is *Left Up*, y slider should be in right position and y = 90 |
    | Invert device on x axis to vertical | Verify that device recognizes that it is *Top Down*, x slider should be in left position and x = -90  |
    | Invert device on y axis to vertical | Verify that device recognizes that it is *Right Up*, y slider should be in left position and y = -90 |
    | Turn device upside down (face down) | Verify that device recognizes that it is *Face Down*, y slider should be changing from extreme right to extreme left, and y = -180/+ 180  |
    | Return device to the starting position | Verify that device recognizes that it is *Face Up*, all sliders should be in middle position |
    | On Harmattan/Meggo devices, z will not change during this test given there is hardware support, this doesn't apply to Symbian devices and N900. |  |
        '));
    },


    Small_Sensor_Acceleration : function()
    {
        prompt(twiki('*Verify Sensor Acceleration*

    | *Step* | *Verification* |
    | Launch *Small Sensors* application | |
    | Position device flat on working surface | Verify the values displayed are close to: x=0, y=0, z=9.8 |
    | Position device flat on its y axis | Verify the values displayed are close to: x=0, y=9.8, z=0 |
    | Position device flat on its x axis | Verify the values displayed are close to: x=9.8, y=0, z=0 |
    | Position device flat on its z axis | Verify the values displayed are close to: x=0, y=0, z=9.8 |
            '));
     }

    Sym_Tap : function()
    {
        prompt(twiki('*Verify Sym Tap Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.tap* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | double tap on the device | Verify the values displayed are changed |
            '));
     }

    Sym_Orientation : function()
    {
        prompt(twiki('*Verify Sym Orientation Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.orientation* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | slowly rotate the device | Verify the values displayed are changed accordingly |
            '));
     }

    Sym_MagnetoMeter : function()
    {
        prompt(twiki('*Verify Sym Magneto Meter*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.magnetometer* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | put the device closer to a iron or steel object | Verify the values displayed are changed accordingly |
            '));
     }

    Sym_Compass : function()
    {
        prompt(twiki('*Verify Sym Compass Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.compass* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | slowly turn the device around | Verify the values displayed are changed accordingly |
            '));
     }

    Sym_Lux : function()
    {
        prompt(twiki('*Verify Sym Compass Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.luxsensor* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | change the luminance value around the device | verify the values displayed are changed accordingly |
            '));
     }

    Sym_Dynamic : function()
    {
        prompt(twiki('*Verify Sym Compass Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | register a dynamic sensor device ||
    | select *Sensors* and click on *sensor explorer* | verify the dynamic sensor appears in the sensor list|
    | click on *start* button ||
    | select *reading properties* tab ||
    | change the sensor value depends on the sensor type | verify the values displayed are changed accordingly |
            '));
     }

    Sym_Gyroscope : function()
    {
        prompt(twiki('*Verify Sym Compass Sensor*

    | *Step* | *Verification* |
    | Launch *bluewheel* application | |
    | select *Sensors* and click on *sensor explorer* ||
    | select *sym.gyroscope* as sensor type ||
    | click on *start* button ||
    | select *reading properties* tab ||
    | slowly turn and move the device around | verify the values displayed are changed accordingly |
            '));
     }

}
