/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/connectivity/nfc

testcase = {

    target_detection_notification: function()
    {
        // Test meta data
        testTitle = "Connectivity - Target detection notification";
        testBinary = "ndefeditor";
        testSource = "$MOBILITYDIR/examples/ndefeditor";
        testGoal = "Verify target detection notification";
        testPreconditions = "An NFC tag";
        testGroups = "BAT_MOBILITY";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Retrieve* | Verify a blue square appears in the upper left corner, this shows the application is waiting for an NFC card |
            | Bring the card within 1 cm of the NFC sensor | Verify the blue square disappears indicating the card was detected |
        "));
    },

    touched_target_information: function()
    {
        // Test meta data
        testTitle = "Connectivity - Touch target information";
        testBinary = "testQtNfc";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/NFC";
        testGoal = "Verify touched target information can be displayed";
        testPreconditions = "An NFC tag";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *start* | |
            | Bring the card within 1 cm of the NFC sensor | Verify a popup message appears that reads 'target detected' |
            | Take the sensor away from the card | Verify the message changes to 'target lost' |
            | Press okay until the messages disappears | Verify the 'Target UID', 'Type' and 'Access methods' are shown as expected |
        "));
    },

    NDEF_Notification_Registration: function()
    {
        // Test meta data
        testTitle = "Connectivity - NDEF notification registration";
        testBinary = "annotatedURL";
        testSource = "$MOBILITYDIR/examples/annotatedurl";
        testGoal = "Verify NDEF notifications can be Registered";
        testPreconditions = "An NFC tag with an NFC text and NFC URI field";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Bring the card within 1 cm of the NFC sensor | Verify the Text and URL are displayed on the annotatedURL application and no other application is registered |
        "));
    },


    NDEF_notification_deregistration: function()
    {
        testTitle = "Connectivity - NDEF notification deregistration";
        testBinary = "";
        testGoal = "Verify that unregister for NDEF notifications";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        skip('No test app', SkipAll);
    },
    
    NDEF_message_display: function()
    {
        // Test meta data
        testTitle = "Connectivity - NDEF message display";
        testBinary = "ndefeditor";
        testSource = "$MOBILITYDIR/examples/ndefeditor";
        testGoal = "Verify NDEF message can be displayed";
        testPreconditions = "An NFC tag";
        testGroups = "BAT_MOBILITY";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Retrieve* button | Verify a blue square appears in the upper left corner, this shows the application is waiting for an NFC card |
            | Bring the card within 1 cm of the NFC sensor | Verify the blue square disappears indicating the card was detected |
            | | Verify the target information is displayed by ndefeditor |
        "));
    },
    
    NDEF_message_write: function()
    {
        // Test meta data
        testTitle = "Connectivity - NDEF message write";
        testBinary = "ndefeditor";
        testSource = "$MOBILITYDIR/examples/ndefeditor";
        testGoal = "Verify NDEF message can be written";
        testPreconditions = "An NFC tag";
        testGroups = "BAT_MOBILITY";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select clear to erase any existing records | |
            | Select *add* then press *NFC Text Record* and fill in the fields with text | |
            | Select *add* a second time and then press *NFC URI Record* and fill this field with a URL | |
            | Select *store* | Verify that a yellow square appears in the upper left hand corner of the application indicating awaiting a tag to write to |
            | Bring the card within 1 cm of the NFC sensor | Verify the yellow square disappears indicating the card was written to |
            | Select *clear* to clear the fields and then press *Retrieve* | |
            | Bring the card within 1 cm of the NFC sensor | Verify the blue square disappears indicating the card was detected and read |
            | | Verify the fields are populated with the data that was entered previously |
        "));
    },
    
    tag_specific_command_write: function()
    {
        testTitle = "Connectivity - tag specific command write";
        testBinary = "";
        testGoal = "";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        skip('No test app', SkipAll);
    },
    
    LLCP_connection: function()
    {
        // Test meta data
        testTitle = "Connectivity - LLCP connection";
        testBinary = "bttennis";
        testSource = "$MOBILITYDIR/demos/bttennis";
        testGoal = "Verify LLCP connection";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " on two NFC capable devices | Test application started successfully |
            | Touch the two devices together to enable a handshake and bluetooth connection via NFC | Verify the devices link together and enable play |
        "));
    }
}
