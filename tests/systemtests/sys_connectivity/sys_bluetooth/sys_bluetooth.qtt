/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/connectivity/bluetooth

testcase = {
    bluetooth_device_discovery: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth device discovery";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth device discovery";
        testPreconditions = "None";
        testGroups = "BAT_MOBILITY";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Device Discovery* | |
            | Select *GeneralUnlimitedInquiry* | Verify that the incremental checkbox is checked |
            | Press *start* | Verify the nearby bluetooth enabled devices start populating the list one at a time |
            | Press quit and deselect the incremental checkbox | |
            | Press *start* | Verify the list blanks and remains blank until all devices are found indicated by the *stop* button changing back to 'scan' |
            | Press quit again and then change 'GeneralUnlimitedInquiry' to 'LimitedInquiry' | |
            | Press *start* | Verify the list blanks and remains blank until all devices are found indicated by the *stop* button changing back to 'scan', note that not many devices are capable of Limited Inquiry so the list may stay blank |
        "));
    },

    bluetooth_service_discovery: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth service discovery";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth service discovery";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Service Discovery* | |
            | Select *all devices* and check the *Full Discovery* checkbox | |
            | Press *Find* and when the scan completes a dialog will open, if it doesn't press *Found Services* | Verify that for the device shown the expected services are displayed. |
            | From the device menu at the top of the dialog select another device | Verify it also shows the expected services |
            | Add a filter and repeat the test | Verify the only services found are of the filter type |
        "));
    },

    bluetooth_service_record: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth service record";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth service record";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Service Discovery* | |
            | Select *all devices* and check the *Full Discovery* checkbox | |
            | Press *Find* and when the scan completes a dialog will open, if it doesn't press *Found Services* | |
            | Select a device and then choose a service by tapping it | Verify that the service record attributes are displayed |
            | On another device run Bluewheel, select Bluetooth and then run *Local Server* | |
            | Choose a server type and then press start server, don't press the register service button | |
            | Run the *Register Service* application from the bluetooth menu | Verify that previously created service will already be selected |
            | Press *Register* | |
            | On the other device press the find button again and wait till the scanning is complete | |
            | From the device list select the other bluetooth device | Verify the created service is listed and the values are correct |
            | On the second device deregister the service | |
            | Perform another scan on the first device | Verify the service is no longer available |
        "));
    },
    
    bluetooth_sockets: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth sockets";
        testBinary = "";
        testGoal = "";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        //unit tests however the unit tests need to be run manually so as to set up the server first, can't do this on a device
        skip('Not able to test on the device', SkipAll);
    },
    
    bluetooth_security: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth security";
        testBinary = "";
        testGoal = "";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        skip('No test app', SkipAll);
    },
    
    bluetooth_device_control: function()
    {
        // Test meta data
        testTitle = "Connectivity - Bluetooth device control";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth device control";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | From the devices settings menu turn off the Bluetooth | |
            | Launch " + testBinary + " | Test application started successfully |
            | Run *Local Devices* | Verify that the Local Devices application shows *powered off* |
            | In the *Local Devices* application change the setting to *connectable* ||
            | Go back to the device's settings menu | Verify the Bluetooth is turned on and not visible |
            | Go back to the *Local Devices* application and change the setting to 'discoverable' ||
            | Go back to the device's settings menu | Verify the Bluetooth is on and visible |
            | Go back to the *Local Devices* application and change the setting to 'powered off' ||
            | Go back to the device's settings menu | Verify the Bluetooth is turned off |
        "));
    },

    bluetooth_pairing : function()
    {
        // Test meta data
        testTitle = "Bluetooth - bluetooth pairing";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify that bluetooth pairing is correct";
        testPreconditions = "None";
        testGroups = "BAT_MOBILITY";
        testRequirements = ""

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>
            

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Run *Pairing* and press *Scan* | Verify that the backend can be selected without any error or crash |
            | When scanning is complete tap one of the devices in the list to open the pairing menu | |
            | From the pairing menu select paired and press the pair button | Verify the devices start the pairing proceedure, choose not to pair automatically |
            | Currently the phones will go back to unpaired, from the menu choose paired again and press pair, this time they will stay paired | |
            | Press quit to go back to the scan list | Verify that the item selected previously is in a paired state |
            | Select the device again and this time change the state to unpaired and press the Pair button | Verify that 'Pairing of unknown device' will be displayed |
            | Press okay to close the dialog and quit to go back to the scan list | Verify the device is now in an unpaired state |
            | Select the device again to bring up the pairing menu and select AuthorizedPaired and press the Pair button, complete the pairing proceedure this time selecting the pair automatically option when asked | |
            | Press quit to go back to the scan list | Verify the device is set to Authorized |
        "));
    },

    bluetooth_local_device_selection : function()
    {
        // Test meta data
        testTitle = "Bluetooth - Bluetooth local device selection";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify that bluetooth local device can be selected";
        testPreconditions = "There is a platform with multiple Bluetooth devices";
        testGroups = " ";
        testRequirements = ""

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>
            

            | *Step* | *Verification* |
            | Go to the settings menu in the testPreconditions' platform and turn off all Bluetooth devices | |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Local Devices* | |
            | From the top pull down menu choose a Bluetooth device | |
            | Set the device to 'Discoverable' | |
            | Go back to the settings menu | Verify only that Bluetooth device is on and visible |
            | Return to the 'Local Devices' application and make a different Bluetooth device discoverable | |
            | Go back to the settings menu | Verify that Bluetooth device is now on and visible |
            
        "));
    },

    bluetooth_qml_accessability: function()
    {
        // Test meta data
        testTitle = "Bluetooth - Bluetooth qml accessability";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth qml accessability ";
        testPreconditions = "";
        testGroups = " ";
        testRequirements = ""

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>
            

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *Service Discovery.qml* | |
            | Select 'all devices' and check the 'Full Discovery' checkbox | |
            | Press *Find* and when the scan completes a dialog will open, if it doesn't press *Found Services* | Verify that for the device shown the expected services are displayed |
            | From the device menu at the top of the dialog select another device | Verify it also shows the expected services |
            | Add a filter and repeat the test | Verify the only services found are of the filter type |
        "));
    },
    
    bluetooth_send_file : function()
    { 
        // Test meta data
        testTitle = "Bluetooth - Bluetooth send file";
        testBinary = "testQtBluetooth";
        testSource = "$MOBILITYDIR/tests/applications/connectivity/bluetooth";
        testGoal = "Verify bluetooth can send file successfully";
        testPreconditions = "The device has a small text file and a vCard for sending";
        testGroups = "BAT_MOBILITY";
        testRequirements = ""

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>
            

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select *send item* | |
            | Press *select target device* | |
            | After the target device is selected click on *file sending* | |
            | Press *select item* and choose a small text file to send | |
            | Press *send* and follow the prompts on the receiving device | Verify the text file is received on the other device |
            | Repeat this with a vCard | Verify the vCard is received on the other device | 
        "));
    }
}
