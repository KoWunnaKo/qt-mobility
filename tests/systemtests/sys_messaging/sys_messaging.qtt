/****************************************************************************
**
** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/messaging

testcase = {

    send_plaintext_message: function () {
        // Test meta data
        testTitle = "Messaging - Send Message in Plain Text";
        testBinary = "serviceactions";
        testSource = "$MOBILITYDIR/demos/serviceactions";
        testGoal = "Verify that a message can be sent in plain text.";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
            | Fill in To, Subject, Content | |
            | Click 'Add attachment' menu item and select file(s) to attach | |
            | Click on 'Send' menu entry | Verify that mail has been sent to the desired mailbox with the correct subject, body and complete attachment(s) |
       "));
    },

    send_html_message : function() {
         // Test meta data
         testTitle = "Messaging - Send Message in HTML";
         testBinary = "serviceactions";
         testSource = "$MOBILITYDIR/demos/serviceactions";
         testGoal = "Verify that a message can be sent in HTML.";
         testPreconditions = "None";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
             | Fill in To, Subject, Content | |
             | Click 'Add attachment' menu item and select file(s) to attach | |
             | Click on 'Send as HTML' menu entry | Verify that mail has been sent to the desired mailbox with the correct subject, body and complete attachment(s) |
         "));
    },

    compose_and_send_message_with_attachment : function() {
         // Test meta data
         testTitle = "Messaging - Compose and Send With Attachment";
         testBinary = "serviceactions";
         testSource = "$MOBILITYDIR/demos/serviceactions";
         testGoal = "Verify that a message can be sent with an attachment.";
         testPreconditions = "None";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
            | Fill in To, Subject, Content | |
            | Click Add attachment' menu item and select file(s) to attach | |
            | Click on 'Compose menu entry | On Windows, confirm that the Outlook mail client for Windows is now showing |
            | Click on the 'Send' menu button in Outlook client, on other platforms, choose send from action | Verify that mail has been sent to the desired mailbox with the correct subject, body and complete attachment(s) |
        "));
    },

    query_message : function() {
        // Test meta data
        testTitle = "Messaging - Query Messages";
        testBinary = "querymessage";
        testSource = "$MOBILITYDIR/examples/querymessages";
        testGoal = "Verify that received messages can be queried.";
        testPreconditions = "*querymessage* is a console application, it must be launched from command line, and the results are shown on command line only<br>Currently the test is not available for Symbian platforms.";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

           | *Step* | *Verification* |
           | Synchronize a set of test messages to the phone using Nokia Ovi Suite or an equal tool | |
           | Launch " + testBinary + " from command line | Verify that all available messages are properly queried and results are correct |
        "));
    },

    /* FIXME
      This test requires more work!
      WHat does 'according parameters' mean?
      Suggestion: search for "Like As" and "Not Like" conditions with wildcard such as %@hotmail.com
    */
    search_message : function() {
     // Test meta data
     testTitle = "Messaging - Search Message";
     testBinary = "testQtMessaging";
     testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
     testGoal = "Verify that messages can be searched.";
     testPreconditions = "A set of test messages sent on a range of dates from various contacts to the phone using Nokia Ovi Suite or an equal tool are available on the device.";
     testGroups = " ";
     testRequirements = " ";

     // Test steps
     prompt(twiki("---+++ " + testTitle + "<br><br>
         *Goal:* " + testGoal + "<br>
         *Pre-Requisites:* " + testPreconditions + "<br>
         *Tested Binary:* " + testBinary + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Search Messsages tab | |
        | Select a search type | |
        | Fill in according parameters | |
        | Click on Make Query (=Search) | Verify correct messages are shown and can be viewed |
        | return to search results | |
        | Select an message and click on Show | |
        | Answer No to open it within the test application | Verify the message is properly shown |
      "));
    },

    receive_sms : function() {
      // Test meta data
      testTitle = "Messaging - Receive SMS";
      testBinary = "testQtMessaging";
      testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
      testGoal = "Verify that sms can be received.";
      testPreconditions = "A SIM card insert to the phone and network is available.";
      testGroups = "BAT_MOBILITY";
      testRequirements = " ";

      // Test steps
      prompt(twiki("---+++ " + testTitle + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Select Search Message item | |
         | Use By type as search type, SMS, tick SMS box | |
         | click on Make query | |
         | Send a new SMS to the testing phone number from other device | |
         | In the result page, select a message, click on Send/Receive button | |
         | Wait for a while | Verify the new message is retrived to the list |
          "));
      },

    receive_mms : function() {
      // Test meta data
      testTitle = "Messaging - Receive MMS";
      testBinary = "testQtMessaging";
      testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
      testGoal = "Verify that mms can be received.";
      testPreconditions = "A SIM card insert to the phone and network is available.";
      testGroups = " ";
      testRequirements = " ";

      // Test steps
      prompt(twiki("---+++ " + testTitle + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Select Search Message item | |
         | Use By type as search type, MMS, tick MMS box | |
         | click on Make query | |
         | Send a new MMS to the testing phone number from other device | |
         | In the result page, select a message, click on Send/Receive button | |
         | Wait for a while | Verify the new message is retrived to the list |
          "));
      },

    receive_email : function() {
      // Test meta data
      testTitle = "Messaging - Receive Email";
      testBinary = "testQtMessaging";
      testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
      testGoal = "Verify that email can be received.";
      testPreconditions = "There are some messages in Email account, and network is available.";
      testGroups = " ";
      testRequirements = " ";

      // Test steps
      prompt(twiki("---+++ " + testTitle + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Select Search Message item | |
         | Use By type as search type, Email account, tick Email box | |
         | click on Make query | |
         | Send a new message to the selected account from other device | |
         | In the result page, select a message, click on Send/Receive button | |
         | Wait for a while | Verify the new message is retrived to the list |
          "));
      },

    show_message : function() {
       // Test meta data
       testTitle = "Messaging - Show Message";
       testBinary = "keepintouch (alternative: declarativeMessaging, testQtMessaging)";
       testSource = "$MOBILITYDIR/examples/keepintouch";
       testGoal = "Verify that an messages can be shown.";
       testPreconditions = "A set of test messages sent on a range of dates from various contacts to the phone using Nokia Ovi Suite or an equal tool are available on the device.";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Select *Year* from *Contacted within the last* combo box | |
          | Click on *Search* | Verify that all contacts contacted in the last year are displayed |
          | Click on a contact name | Verify the messages with the contact are shown |
          | Select one message | |
          | Click on *Show* button | Verify the message details are shown |
          | Go back and click on *Forward* button | Verify the forward dialog is shown |
     "));
    },

    delete_sms : function() {
         // Test meta data
         testTitle = "Messaging - Delete SMS";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that SMS can be deleted.";
         testPreconditions = "Some SMS are available in inbox, and network available.";
         testGroups = "BAT_MOBILITY";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select Search Message item | |
            | Use By type as search type, SMS, tick SMS box | |
            | click on Make query | |
            | In the result page, select a short message, click on Show button | |
            | Select No button | Verify the message is properly displayed |
            | Click on Delete button | Verify the short message is deleted from inbox |
         "));
     },

    delete_mms : function() {
         // Test meta data
         testTitle = "Messaging - Delete MMS";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that MMS can be deleted.";
         testPreconditions = "Some MMS are available in inbox, and network available.";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select Search Message item | |
            | Use By type as search type, MMS, tick MMS box | |
            | click on Make query | |
            | In the result page, select a MMS, click on Show button | |
            | Select No button | Verify the message is properly displayed |
            | Click on Delete button | Verify the MMS is deleted from inbox |
         "));
     },

    delete_email : function() {
         // Test meta data
         testTitle = "Messaging - Delete Email";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that messages can be deleted.";
         testPreconditions = "Some messages are available in Email account, and network available.";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select Search Message item | |
            | Use By type as search type, Email account, tick Email box | |
            | click on Make query | |
            | In the result page, select a message, click on Show button | |
            | Select No button | Verify the message is properly displayed |
            | Click on Delete button | Verify the message is deleted from selected account |
         "));
     },

    send_sms : function() {
       // Test meta data
       testTitle = "Messaging - Send SMS";
       testBinary = "writemessage (alternatives: messagingEx and testQtMessaging)";
       testSource = "$MOBILITYDIR/examples/writemessage";
       testGoal = "Verify that an SMS message can be sent.";
       testPreconditions = "None";
       testGroups = "BAT_MOBILITY";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
          | Choose *SMS* in *Account* field | |
          | Fill in a known mobile phone number to *To* field | Verify that the *Subject* field is disabled |
          | Fill in some random text to the body text area | Verify that the *Add*/ *Remove* buttons are disabled for SMS |
          | Click on *Send* | On a recever mobile phone, verify the correct SMS is received |
        "));
    },

    store_sms : function() {
       // Test meta data
       testTitle = "Messaging - Store SMS";
       testBinary = "messagingex (alternatives: testQtMessaging)";
       testSource = "$MOBILITYDIR/manual/messagingex";
       testGoal = "Verify that an SMS message can be saved.";
       testPreconditions = "None";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Choose *SMS* in *Account* field (or the SMS tab) | |
          | Fill in a known mobile phone number to *To* field | |
          | Fill in some random text to the body text area | |
          | Click on *Store Message* | Verify the correct SMS is stored in the system (draft folder) |
        "));
    },

    read_sms : function() {
          // Test meta data
          testTitle = "Messaging - Read SMS";
          testBinary = "testQtMessaging";
          testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
          testGoal = "Verify that an SMS message can be read.";
          testPreconditions = "Some messages in SMS account, and network available";
          testGroups = "BAT_MOBILITY";
          testRequirements = " ";

          // Test steps
          prompt(twiki("---+++ " + testTitle + "<br><br>
              *Goal:* " + testGoal + "<br>
              *Pre-Requisites:* " + testPreconditions + "<br>
              *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally |
             | Select Search Message item | |
            | Use By type as search type, SMS account, tick SMS box | |
            | click on Make query | |
            | In the result page, select a message, click on Show button | |
            | Select No button | Verify the message is properly displayed |
            | Click on Close | |
            | Click on Show button again, select Yes this time | Verify the message is properly displayed using the native client |
          "));
      },

    compose_sms : function() {
         // Test meta data
         testTitle = "Messaging - Compose SMS";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that an SMS messages can be composed and transferred to native client.";
         testPreconditions = "None";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | select SMS tab | |
          | Type in destination phone number | |
          | Type in some content | |
          | Click on Compose | Verify the native SMS client program is launched |
          | Save draft and return | |
        "));
    },

    send_mms : function() {
       // Test meta data
       testTitle = "Messaging - Send MMS";
       testBinary = "writemessage (alternatives: messagingEx and testQtMessaging)";
       testSource = "$MOBILITYDIR/examples/writemessage";
       testGoal = "Verify that an MMS message can be sent.";
       testPreconditions = "None";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
          | Choose *MMS* in *Account* field | |
          | Fill in a known mobile phone number to *To* field | |
          | Fill in some random subject to *Subject* field | |
          | Fill in some random text to the body text area | |
          | Click on *Add* button to add an attachment file to the message | |
          | Choose the attachment just added, click on *Remove* to remove it | |
          | Click on *Add* button to add two more attachments file to the message | |
          | Click on *Send* | On the recever mobile phone, verify the correct MMS is received with attachments |
        "));
    },

    store_mms : function() {
       // Test meta data
       testTitle = "Messaging - Store MMS";
       testBinary = "messagingex (alternatives: testQtMessaging)";
       testSource = "$MOBILITYDIR/manual/messagingex";
       testGoal = "Verify that an MMS message can be saved.";
       testPreconditions = "None";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Choose *MMS* in *Account* field (or the MMS tab) | |
          | Fill in a known mobile phone number to *To* field | |
          | Fill in some random subject to *Subject* field | |
          | Fill in some random text to the body text area | |
          | Click on *Add Attachment* button to add an attachment file to the message | |
          | Choose the attachment just added, click on *Remove Attachment* to remove it | |
          | Click on *Add Attachment* button to add two more attachments file to the message | |
          | Click on *Store Message* | Verify the correct MMS is stored with attachments | |
        "));
    },

    read_mms : function() {
          // Test meta data
          testTitle = "Messaging - Read MMS";
          testBinary = "testQtMessaging";
          testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
          testGoal = "Verify that an MMS message can be read.";
          testPreconditions = "Some messages in MMS account, and network available";
          testGroups = " ";
          testRequirements = " ";

          // Test steps
          prompt(twiki("---+++ " + testTitle + "<br><br>
              *Goal:* " + testGoal + "<br>
              *Pre-Requisites:* " + testPreconditions + "<br>
              *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally |
             | Select Search Message item | |
             | Use By type as search type, MMS account, tick MMS box | |
             | click on Make query | |
             | In the result page, select a message, click on Show button | |
             | Select No button | Verify the message is properly displayed |
             | Click on Close | |
             | Click on Show button again, select Yes this time | Verify the message is properly displayed using the native client |
       "));
      },

    compose_mms : function() {
         // Test meta data
         testTitle = "Messaging - Compose MMS";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that an MMS message can be composed.";
         testPreconditions = "None";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select MMS tab | |
            | Type in destination phone number | |
            | Type in a subject and some content | |
            | Insert some attachments | |
            | Click on Compose | Verify the native SMS client program is launched |
            | Save draft and return | |
       "));
    },

    send_email : function() {
         // Test meta data
         testTitle = "Messaging - Send Email";
         testBinary = "writemessage (alternatives: messagingEx and testQtMessaging)";
         testSource = "$MOBILITYDIR/examples/writemessage";
         testGoal = "Verify that an EMail message can be sent.";
         testPreconditions = "an Email account called *Email* exists on the device";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally, and UI layout is proper and usable on the specific device |
            | Choose *Email* in *Account* field | |
            | Fill in a known email address to *To* field | |
            | Fill the CC and BCC fields with three email addresses each, separated by ';' | |
            | Fill in some random subject to *Subject* field | |
            | Fill in some random text to the body text area | |
            | Click on *Add* button to add an attachment file to the message | |
            | Choose the attachment just added, click on *Remove* to remove it | |
            | Click on *Add* button to add two more attachments file to the message | |
            | Click on *Send* | On the recever email client, verify the correct Email is received with attachments |
            | | Verify that CC and BCC adresses have received EMail as well and that To and Cc fields are visible, but Bcc adresses are not visible. |
        "));
    },

    //FIXME: This test needs to become a lot more specific, e.g. *which* encoding formats to we want to test?
    // and does that mean the test can (and should) be combined with Send_EMail??
    send_email_with_encoding_formats : function() {
       // Test meta data
       testTitle = "Messaging - Supported Encoding Formats";
       testBinary = "testQtMessaging";
       testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
       testGoal = "Verify that account settings can be send with various encoding formats.";
       testPreconditions = "None";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Select Create Message item | |
          | Select Email Message button | |
          | Click on Settings button | |
          | Click on Charsets button | |
          | Click on Add button to add some charsets | |
          | Click on Done button | |
          | Change the Text/Html settings | |
          | Click on Done to return to the Email creating dialog | |
          | Store/compose/send the message | Verify the message has been properly stored/composed/sent using desired charsets and format |
          "));
      },

    store_email : function() {
         // Test meta data
         testTitle = "Messaging - Store EMail";
         testBinary = "messagingex (alternatives: testQtMessaging)";
         testSource = "$MOBILITYDIR/manual/messagingex";
         testGoal = "Verify that an EMail message can be saved.";
         testPreconditions = "Email account called *Email* exists on the device";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Choose *Email* in *Account* field | |
            | Fill in a known email address to *To* field | |
            | Fill in some random subject to *Subject* field | |
            | Fill in some random text to the body text area | |
            | Click on *Add Attachment* button to add an attachment file to the message | |
            | Choose the attachment just added, click on *Remove Attachment* to remove it | |
            | Click on *Add Attachment* button to add two more attachments file to the message | |
            | Click on *Store Message* | Verify the correct Email is stored (in draft folder) with attachments |
        "));
    },

    read_email : function() {
        // Test meta data
        testTitle = "Messaging - Read E-Mail";
        testBinary = "testQtMessaging";
        testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
        testGoal = "Verify that an EMail message can be read.";
        testPreconditions = " <br>
   1. Email account called *Email* exists on the device<br>
   1. Email accounts contains valid messages.<br>
   1. Network is available.<br>";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>

           | *Step* | *Verification* |
           | Launch " + testBinary + " | App launches normally |
           | Select Search Message item | |
           | Use By type as search type, Email account, tick Email box | |
           | click on Make query | |
           | In the result page, select a message, click on Show button | |
           | Select No button | Verify the message is properly displayed |
           | Click on Close | |
           | Click on Show button again, select Yes this time | Verify the message is properly displayed using the native client |
          "));
      },

    compose_email : function() {
        // Test meta data
        testTitle = "Messaging - Compose EMail";
        testBinary = "testQtmessaging";
        testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
        testGoal = "Verify that an messages can be composed.";
        testPreconditions = "At least one email account exists on the phone.";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

           | *Step* | *Verification* |
           | Launch " + testBinary + " | App launches normally |
           | Select Email tab | |
           | Select account for From, if necessary, change Settings by clicking on Settings | |
           | Type in destination email address, together with To, CC, BCC | |
           | Type in subject and some content | |
           | Insert some attachments | |
           | Click on Compose | Verify the native Email client program is launched |
           | Save draft and return | |
        "));
    },

    query_contacts : function() {
        // Test meta data
        testTitle = "Messaging - Query Contacts";
        testBinary = "keepintouch";
        testSource = "$MOBILITYDIR/examples/keepintouch";
        testGoal = "Verify that contacts meeting specific parameters can be queried.";
        testPreconditions = "test messages received on a range of dates from various contacts are available on the phone.";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

           | *Step* | *Verification* |
           | Launch " + testBinary + " | App launches normally |
           | Select *Year* from *Contacted within the last* combo box | |
           | Click on *Search* | Verify that all contacts contacted in the last year are displayed |
           | Select *3 Months* from *Contacted within the last* combo box | |
           | Click on *Search* | Verify that all contacts contacted in the last three months are displayed |
           | Check the *But not in the last* checkbox | |
           | Choose *Month* in the combo box next to the checkbox | |
           | click on *Search* | Verify that the contacts contacted in the last three months but not in the last month are shown |
        "));
    },

      search_accounts_by_name : function() {
           // Test meta data
           testTitle = "Messaging - Search Accounts By Name";
           testBinary = "testQtMessaging";
           testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
           testGoal = "Verify that accounts can be searched by name.";
           testPreconditions = "A set of accounts exist on the device.";
           testGroups = " ";
           testRequirements = " ";

           // Test steps
           prompt(twiki("---+++ " + testTitle + "<br><br>
               *Goal:* " + testGoal + "<br>
               *Pre-Requisites:* " + testPreconditions + "<br>
               *Tested Binary:* " + testBinary + "<br>

              | *Step* | *Verification* |
              | Launch " + testBinary + " | App launches normally |
              | Select Search Accounts tab | |
              | Type in an account name, eg. sms, which is not case sensitive | |
              | Click on Search | Verify the correct accounts are found and shown in dialog |
          "));
      },

      search_accounts_by_id : function() {
         // Test meta data
         testTitle = "Messaging - Search Accounts by ID";
         testBinary = "testQtMessaging";
         testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
         testGoal = "Verify that messages can be searched by account ID.";
         testPreconditions = "A set of test messages sent on a range of dates from various contacts to the phone using Nokia Ovi Suite or an equal tool are available on the device.";
         testGroups = " ";
         testRequirements = " ";

         // Test steps
         prompt(twiki("---+++ " + testTitle + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select Search Accounts tab | |
            | Type in a full Id, case sensitive. You can find the Id strings by doing a search by name. | |
            | Click on Search | Verify the correct accounts are found and shown in dialog |
          "));
      },

    account_settings : function() {
       // Test meta data
       testTitle = "Messaging - Account Settings";
       testBinary = "testQtMessaging";
       testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
       testGoal = "Verify that account settings can be set.";
       testPreconditions = "None";
       testGroups = " ";
       testRequirements = " ";

       // Test steps
       prompt(twiki("---+++ " + testTitle + "<br><br>
           *Goal:* " + testGoal + "<br>
           *Pre-Requisites:* " + testPreconditions + "<br>
           *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Select Create Message item | |
          | Select Email Message button | |
          | Click on Manage Accounts button | |
          | Click on Select account combo box and choose an Email account | Verify all Email account properties are properly displayed |
          | Click on Select account button | |
          | Go back to the Email creating dialog, fill in all fields with valid values | |
          | Store/Compose/Send the message | Verify the message has been properly stored/composed/sent with desired account |
          "));
      },

    filter_message : function() {
        // Test meta data
        testTitle = "Messaging - Filter Message";
        testBinary = "testQtMessaging";
        testSource = "$MOBILITYDIR/tests/applications/messaging/testqtmessaging";
        testGoal = "Verify that messages can be filter by the filter proxy.";
        testPreconditions = "There are different types of messages in the phone.";
        testGroups = " ";
        testRequirements = " ";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select Search Messsages tab | |
            | Select a search type | |
            | Fill in according parameters | |
            | Click on Make Query (=Search) | Verify correct messages are shown follow the filter proxy |
            | Repeat these steps with different search type | Verify correct messages are shown follow the filter proxy |
  "));
},

/*
    New tests to be considered
      Search_Cross_Email_Account_Types

      Search_Messages_By_Type
      Search_Messages_By_Priority
      Search_Messages_By_Sender
      Search_Messages_By_Receipient_To
      Search_Messages_By_Receipient_CC
      Search_Messages_By_Receipient_BCC
      Search_Messages_By_Receipient_Any
      Search_Messages_By_Status
      Search_Messages_By_Subject
      Search_Messages_By_Timestamp
      Search_Messages_By_Receiption_Time
      Search_Messages_By_Folder
      Search_Messages_By_Account
      Synchronize_Message
      Send_Receive_Message

      Synchronize_SMS
      Send_Receive_SMS

      Synchronize_EMail
      Send_Receive_EMail
      Email_Add_Attachments
      Email_Clear_Attachments
      Email_Store_with_Attachments
      Email_Send_with_Attachments
      Email_Settings_Add_Charsets
      Email_Settings_Clear_Charsets
      Email_Settings_Change_Bodytype
      Email_Send_cross_Charsets
      Email_Store_cross_Charsets
      Email_Compose_cross_Charsets
      Email_Send_cross_Bodytype
      Email_Store_cross_Bodytype
      Email_Compose_cross_Bodytype
      Email_ManageAccounts_Select_Account
      Email_ManageAccounts_Delete_Account

      MMS_Add_Attachments
      MMS_Clear_Attachments
      MMS_Store_with_Attachments
      MMS_Send_with_Attachments
      Synchronize_MMS
      Send_Receive_MMS
*/
}
