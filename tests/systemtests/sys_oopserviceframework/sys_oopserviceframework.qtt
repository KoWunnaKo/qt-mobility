/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/serviceframework

testcase = {

    start_out_of_process_service: function()
    {
        // Test meta data
        testTitle = "Serviceframework - Start out of process Service";
        testBinary = "sfwecho_service";
        testSource = "$MOBILITYDIR/examples/sfwecho/sfwecho_service";
        testGoal = "Verify sfwecho_service can be launched and running in background";
        testPreconditions = "None";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " (as background process) | Verify that the application(service) is running in background as Daemon |
        "));
    },

    broadcasting_messages_send_correctly : function()
    {
        // Test meta data
        testTitle = "Serviceframework - Sending broadcasting messages";
        testBinary = "sfwecho_client";
        testSource = "$MOBILITYDIR/examples/sfwecho/sfwecho_client";
        testGoal = "Verify a Broadcasting message to sfw server which will bounce it back";
        testPreconditions = "sfwecho_service is running in background";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | |
            | Choose *Global Chat* radio button | |
            | Fill in some random text in the Message input box | |
            | Click on *Send* button | Verify that the message is echoed to the message box in the middle of current window |
        "));
    },

    private_messages_send_correctly : function()
    {
        // Test meta data
        testTitle = "Serviceframework - Sending private messages";
        testBinary = "sfwecho_client";
        testSource = "$MOBILITYDIR/examples/sfwecho/sfwecho_client";
        testGoal = "Verify send a private message to sfw server which will bounce it back";
        testPreconditions = "sfwecho_service is running in background";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | |
            | Choose *Private Chat* radio button | |
            | Fill in some random text in the Message input box | |
            | Click on *Send* button | Verify that the message is echoed to the message box in the middle of current window |
        "));
    },    

    find_available_services : function()
    {
        // Test meta data
        testTitle = "Serviceframework - Find available services";
        testBinary = "servicebrowser";
        testSource = "$MOBILITYDIR/examples/servicebrowser";
        testGoal = "List all available services";
        testPreconditions = "sfwecho_service is running in background";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Verify that a list of available services is displayed |
            | | Verify that one of the available services is *EchoService* |
        "));
    },

    find_available_interfaces : function()
    {
        // Test meta data
        testTitle = "Serviceframework - Finding available interfaces";
        testBinary = "servicebrowser";
        testSource = "$MOBILITYDIR/examples/servicebrowser";
        testGoal = "List all available interfaces for a service";
        testPreconditions = "sfwecho_service running in background";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | |
            | Select *EchoService* from the list of services (on Symbian select *EchoService* from the list and then *Interfaces* from the pulldown menu) | Verify the interfaces implemented by Echo Service are displayed |
            | Repeat this with another service | Verify the interfaces for this other service are also displayed |
        "));
    },

    look_up_interface_attributes : function()
    {
        // Test meta data
        testTitle = "Serviceframework - Look up interface attributes";
        testBinary = "servicebrowser";
        testSource = "$MOBILITYDIR/examples/servicebrowser";
        testGoal = "All available attributes for a service interface are in the list";
        testPreconditions = "sfwecho_service running in background";
        testGroups = "BAT_MOBILITY";
        testRequirements = " "


        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | |
            | Select *EchoService* from the list of services (on Symbian select *EchoService* from the list and then *Interfaces* from the pulldown menu) | |
            | From the list of interfaces select one (on Symbian select an interface then select *Attributes* from the pulldown menu) | Verify the attributes for this interface are shown |
            | Repeat this test choosing a different service | Verify the attributes for this new service are also shown |
        "));
    },

}
