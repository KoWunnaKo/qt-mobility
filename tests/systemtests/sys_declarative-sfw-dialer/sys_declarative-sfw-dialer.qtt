/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/serviceframework

testcase = {

    dial_landline_number: function()
    {
        // Test meta data
        testTitle = "Serviceframework - Dial Landline Number";
        testBinary = "qmldialer";
        testSource = "$MOBILITYDIR/examples/declarative-sfw-dialer/declarative-sfw-dialer";
        testGoal = "Verify that landline number can be dialed and hung up";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>    

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select the LandLineDialer in the Select dial service: list box | Verify that a status message is seen \"LandlineDialer... (1.0)\" |
            | Use number pad on dialog to enter number , eg 0123 | |
            | Press the *call* button on dialog | Verify that new messages seen reflect the dialing states: <br>Dialing 0123 <br>Ringing <br>Connected |
            | Click the *hangup* button | Verify that new message seen is reflects the dialing state:<br>Hangup |
        "));
    },
    
    dial_first_voip_number: function()
    {
        // Test meta data
        testTitle = "Serviceframework - Dial First Voip Number";
        testBinary = "qmldialer";
        testSource = "$MOBILITYDIR/examples/declarative-sfw-dialer/declarative-sfw-dialer";
        testGoal = "Verify that Voip 1.1 Number can be dialed and hung up";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>    

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select VoipDialer (1.1) in the Select dial service: list box | Verify that a status message is seen \"VoipDialer (1.1)\" |
            | Use number pad on dialog to enter number , eg 0123 | |
            | Press the *call* button on dialog | Verify that new messages seen reflect the dialing states: <br>Dialing 0123 <br>Ringing <br>Connected |
            | Click the *hangup* button | Verify that new message seen is reflects the dialing state: <br>Hangup |
        "));
    },

    dial_second_voip_number: function()
    {
        // Test meta data
        testTitle = "Serviceframework - Dial Second Voip Number";
        testBinary = "qmldialer";
        testSource = "$MOBILITYDIR/examples/declarative-sfw-dialer/declarative-sfw-dialer";
        testGoal = "Verify that Voip 1.0 Number can be dialed and hung up";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test Steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>    

            | *Step* | *Verification* |
            | Launch " + testBinary + " | Test application started successfully |
            | Select VoipDialer (1.0) in the Select dial service: list box | Verify that a status message is seen \"VoipDialer (1.0)\" |
            | Use number pad on dialog to enter number , eg 0123 | |
            | Press the *call* button on dialog | Verify that new messages seen reflect the dialing states: <br>Dialing 0123 <br>Ringing <br>Connected |
            | Click the *hangup* button | Verify that new message seen is reflects the dialing state:<br>Hangup |
        "));
    },
}
