/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/feedback

testcase = {

    vibrate_using_lowlevel_API_data : {
        intense_two_seconds : [2000, 1, 'intense vibration, for two seconds'],
        intense_four_seconds : [4000, 1, 'intense vibration for four seconds'],
        half_two_seconds : [2000, 0.5, 'half strength vibration, for two seconds'],
        low_two_seconds : [2000, 0.1, 'very low vibration, for two seconds'],
        no_two_seconds : [2000, 0.0 ,'no vibration, for two seconds']
    },

    vibrate_using_lowlevel_API: function(duration, intensity, comment)
    {
        // Test meta data
        testTitle = "Feedback - Vibrate Using Low Level API";
        testBinary = "hapticsplayer";
        testSource = "$MOBILITYDIR/examples/hapticsplayer";
        testGoal = "Verify that vibrate functionality can be called with low level API";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
//            enter(duration, 'duration');
//            enter(intensity, 'intensity');

        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Enter *" + duration + "* into duration field | |
            | Enter *" + intensity + "* into intensity field | |
            | Select *Play* | Verify that sound matches: '*" + comment + "*' |
        "));
    },


    vibrate_using_highlevel_API: function()
    {
        // Test meta data
        testTitle = "Feedback - Vibrate Using High Level API";
        testBinary = "hapticsplayer";
        testSource = "$MOBILITYDIR/examples/hapticsplayer";
        testGoal = "Verify that vibrate functionality can be called with high level API.";
        testPreconditions = "None";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Select high-level tab | |
            | For each value of combobox, Click the 'Play' button | Verify that the expected effect is heard |
        "));
    },


    vibrate_using_file_API: function()
    {
        // Test meta data
        testTitle = "Feedback - Play File";
        testBinary = "hapticsplayer";
        testSource = "$MOBILITYDIR/examples/hapticsplayer";
        testGoal = "Verify that feedback mechanism works using a specified files.";
        testPreconditions = "<br>1. 'File' tab must be enabled.<br>2. Platform specific effect file must be available.";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | select 'File' | |
            | select '...' | |
            | enter location to effect file and select *Open* | |
            | select 'Play/pause' | Verify that the expected effect is heard |
            | select 'Play/pause' again and quickly select 'Stop' | Verify that the expected effect is stoped before it is completed |
        "));
    },


    simple_vibrate_test_data: {
        rumble : ['Rumble'],
        ocean: ['Ocean'],
        click : ['Click'],
        oops : ['Oops']
    },

    simple_vibrate_test: function(effect)
    {
        // Test meta data
        testTitle = "Feedback - Effects";
        testBinary = "hapticsquare";
        testSource = "$MOBILITYDIR/examples/hapticsquare";
        testGoal = "Verify that feedback mechanism works with selected effects.";
        testPreconditions = "tested device must have a touch screen/mouse";
        testGroups = " ";
        testRequirements = "";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>
            *Requirements:* " + testRequirements + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | select '" + effect + "' | Verify effects sounds like: " + effect + "|
        "));
    },

}  // end of testcase

