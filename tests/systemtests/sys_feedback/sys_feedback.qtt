/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/feedback

testcase = {

    vibrate_using_lowlevel_API_data : {
        intense_two_seconds : [2000, 1, 'intense vibration, for two seconds'],
        intense_four_seconds : [4000, 1, 'intense vibration for four seconds'],
        half_two_seconds : [2000, 0.5, 'half strength vibration, for two seconds'],
        low_two_seconds : [2000, 0.1, 'very low vibration, for two seconds'],
        no_two_seconds : [2000, 0.0 ,'no vibration, for two seconds']
    },

    vibrate_using_lowlevel_API: function(duration, intensity, comment)
    {
        // Test meta data
        testApplication = "Feedback - Vibrate Using Low Level API";
        testBinary = "hapticsplayer";
        testGoal = "Verify that vibrate functionality can be called with low level API";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test steps
//            enter(duration, 'duration');
//            enter(intensity, 'intensity');

        prompt(twiki("---+++ " + testApplication + "<br><br>
            *Goal:* " + testGoal + "<br>
            *Pre-Requisites:* " + testPreconditions + "<br>
            *Tested Binary:* " + testBinary + "<br>

            | *Step* | *Verification* |
            | Launch " + testBinary + " | App launches normally |
            | Enter *" + duration + "* into duration field | |
            | Enter *" + intensity + "* into intensity field | |
            | Select *Play* | Verify that sound matches: '*" + comment + "*' |
        "));
    },


    vibrate_using_highlevel_API: function()
    {
         // Test meta data
         testApplication = "Feedback - Vibrate Using High Level API";
         testBinary = "hapticsplayer";
         testGoal = "Verify that vibrate functionality can be called with high level API.";
         testPreconditions = "'High-Level' tab must be enabled";
         testGroups = "BAT";

         // Test steps
         prompt(twiki("---+++ " + testApplication + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally |
             | Select high-level tab | |
             | For each value of combobox, Click the 'Play' button | Verify that the expected effect is heard |
         "));
    },


    vibrate_using_file_API: function()
    {
         // Test meta data
         testApplication = "Feedback - Play File";
         testBinary = "hapticsplayer";
         testGoal = "Verify that feedback mechanism works using a specified files.";
         testPreconditions = "1. 'File' tab must be enabled.<br>
   1. Platform specific effect file must be available.";
         testGroups = "BAT";

         // Test steps
         prompt(twiki("---+++ " + testApplication + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally |
             | select 'File' | |
             | select '...' | |
             | enter location to effect file and select *Open* | |
             | select 'Play/pause' | Verify that the expected effect is heard |
             | select 'Play/pause' again and quickly select 'Stop' | Verify that the expected effect is stoped before it is completed |
         "));
    },


    simple_vibrate_test_data: {
        rumble : ['Rumble'],
        ocean: ['Ocean'],
        click : ['Click'],
        oops : ['Oops']
    },

    simple_vibrate_test: function(effect)
    {
        // Test meta data
        testApplication = "Feedback - Effects";
        testBinary = "hapticsquare";
        testGoal = "Verify that feedback mechanism works with selected effects.";
        testPreconditions = "tested device must have a touch screen/mouse";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | select '" + effect + "' | Verify effects sounds like: " + effect + "|"));
    }

}  // end of testcase

