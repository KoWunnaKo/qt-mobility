/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/gallery

testcase = {

    List_Albums: function()
    {
         // Test meta data
         testApplication = "Music - List Albums";
         testBinary = "declarative-music-browser";
         testGoal = "Verify that all available music albums can be shown and selected";
         testPreconditions = "None";
         testGroups = "BAT";

         // Test steps
         prompt(twiki("---+++ " + testApplication + "<br><br>
             *Goal:* " + testGoal + "<br>
             *Pre-Requisites:* " + testPreconditions + "<br>
             *Tested Binary:* " + testBinary + "<br>

             | *Step* | *Verification* |
             | Launch " + testBinary + " | App launches normally |
             | Click Albums icon | Verify that the albums listed match what is seen via the native music/document browser |
             | | Verify that albums have the expected cover thumbnail above the album title |
             | Click on an album in view that is known to have more that once song in it | Verify that the expected songs are listed in view |
             | Click *Back* button | |
             | Click *Back* button to return to top 'menu' | |
        "));
    },


    List_Artists : function()
    {
        testApplication = "Music - List Artists";
        testBinary = "declarative-music-browser";
        testGoal = "Verify that all available artists can be shown and selected";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Click Artists icon | Verify that the artists listed match what is seen via the native music/document browser |
          | Click on an artist in view | Verify that the artist name is listed correctly at top of view |
          | | Verify that expected songs are listed in view |
          | Click *Back* button | |
          | Click *Back* button to return to top 'menu' | |
        "));
    },


    List_Genres : function()
    {
        testApplication = "Music - List Genres";
        testBinary = "declarative-music-browser";
        testGoal = "Verify that available genres are shown correctly";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
          *Goal:* " + testGoal + "<br>
          *Pre-Requisites:* " + testPreconditions + "<br>
          *Tested Binary:* " + testBinary + "<br>

          | *Step* | *Verification* |
          | Launch " + testBinary + " | App launches normally |
          | Click Genres icon | Verify that the genres listed match what is seen via the native music/document browser |
          | Click on an genre in view | Verify that albums matching the genres are listed |
          | | Verify that the expected songs are listed in view |
          | Click *Back* button | |
          | Click *Back* button to return to top 'menu' | |
        "));
    },


    List_Songs : function()
    {
        testApplication = "Music - List Songs";
        testBinary = "declarative-music-browser";
        testGoal = "Verify that available songs are listed correctly";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test steps
        prompt(twiki("---+++ " + testApplication + "<br><br>
         *Goal:* " + testGoal + "<br>
         *Pre-Requisites:* " + testPreconditions + "<br>
         *Tested Binary:* " + testBinary + "<br>

         | *Step* | *Verification* |
         | Launch " + testBinary + " | App launches normally |
         | Click Songs icon | Verify that the song listed match what is seen via the native music/document browser |
         | | Verify that two of the listed songs have the correct song length mentioned on right |
         | Click *Back* button to return to top menu' | |
        "));
    }

}
